name: Destroy GKE (NUKE)

on:
  workflow_dispatch: {}

permissions:
  contents: read

concurrency:
  group: destroy-gke
  cancel-in-progress: true

jobs:
  destroy:
    runs-on: ubuntu-latest
    env:
      TF_IN_AUTOMATION: "1"
      # Імена з твоєї інфи:
      CLUSTER_NAME: gke-flux-std
      VPC_NAME: gke-vpc-std
      SUBNET_NAME: gke-subnet-std

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Auth to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          export_environment_variables: true

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          install_components: gke-gcloud-auth-plugin

      - name: "Clear stale TF lock (best-effort)"
        shell: bash
        run: |
          set -euo pipefail
          BUCKET=$(grep -E 'bucket *= *"' backend.tf | sed -E 's/.*"([^"]+)".*/\1/')
          PREFIX=$(grep -E 'prefix *= *"' backend.tf | sed -E 's/.*"([^"]+)".*/\1/' || true)
          LOCK_PATH="gs://${BUCKET}/${PREFIX:+$PREFIX/}default.tflock"
          gsutil rm -f "${LOCK_PATH}" || true

      - name: "Nuke: GKE cluster (zonal + autodetect fallback)"
        shell: bash
        env:
          PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          ZONE:       ${{ secrets.GCP_ZONE }}
        run: |
          set -euxo pipefail

          gcloud container clusters delete "$CLUSTER_NAME" \
            --zone "$ZONE" --project "$PROJECT_ID" --quiet || true

          LOC=$(gcloud container clusters list --project "$PROJECT_ID" \
                 --filter="name=$CLUSTER_NAME" --format="value(location)" | head -n1 || true)
          if [[ -n "${LOC:-}" ]]; then
            if [[ "$LOC" =~ -[a-z]$ ]]; then
              gcloud container clusters delete "$CLUSTER_NAME" --zone "$LOC" --project "$PROJECT_ID" --quiet || true
            else
              gcloud container clusters delete "$CLUSTER_NAME" --region "$LOC" --project "$PROJECT_ID" --quiet || true
            fi
          fi

      - name: "Nuke: Subnet then VPC"
        shell: bash
        env:
          PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          REGION:     ${{ secrets.GCP_REGION }}
        run: |
          set -euxo pipefail
          # subnet → потім VPC (idempotent)
          gcloud compute networks subnets delete "$SUBNET_NAME" \
            --region "$REGION" --project "$PROJECT_ID" --quiet || true
          gcloud compute networks delete "$VPC_NAME" \
            --project "$PROJECT_ID" --quiet || true

      - name: "Nuke: remove GitHub deploy key (flux-readonly-gke)"
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          OWNER:        mexxo-dvp
          REPO:         gitops
        run: |
          set -euxo pipefail
          ids=$(gh api repos/$OWNER/$REPO/keys --jq '.[] | select(.title=="flux-readonly-gke") | .id' || true)
          if [[ -n "${ids:-}" ]]; then
            for id in $ids; do
              gh api -X DELETE repos/$OWNER/$REPO/keys/$id || true
            done
          fi

      - name: "Wipe Terraform backend state"
        shell: bash
        run: |
          set -euxo pipefail
          BUCKET=$(grep -E 'bucket *= *"' backend.tf | sed -E 's/.*"([^"]+)".*/\1/')
          PREFIX=$(grep -E 'prefix *= *"' backend.tf | sed -E 's/.*"([^"]+)".*/\1/')
          echo "Wiping gs://${BUCKET}/${PREFIX}/"
          gsutil -m rm -r "gs://${BUCKET}/${PREFIX}/**" || true
          gsutil rm -f "gs://${BUCKET}/${PREFIX}/default.tflock" || true

      - name: "Done"
        run: echo "Full wipe completed."
