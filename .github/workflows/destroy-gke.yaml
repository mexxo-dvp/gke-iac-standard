name: Destroy GKE

on:
  workflow_dispatch:
    inputs:
      destroy_all:
        description: "Destroy ALL TF resources (VPC/Subnet/etc.)? Default false = only cluster + node pool."
        required: true
        type: boolean
        default: false

permissions:
  contents: read

concurrency:
  group: destroy-gke
  cancel-in-progress: true

jobs:
  destroy:
    runs-on: ubuntu-latest
    env:
      TF_IN_AUTOMATION: "1"
      CLUSTER_NAME: gke-flux-std

    steps:
      - uses: actions/checkout@v4

      - uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          export_environment_variables: true

      - uses: google-github-actions/setup-gcloud@v2
        with:
          install_components: gke-gcloud-auth-plugin

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.8.5"

      - name: Clear stale Terraform lock (best-effort)
        shell: bash
        run: |
          set -euo pipefail
          BUCKET=$(grep -E 'bucket *= *"' backend.tf | sed -E 's/.*"([^"]+)".*/\1/')
          PREFIX=$(grep -E 'prefix *= *"' backend.tf | sed -E 's/.*"([^"]+)".*/\1/' || true)
          if [[ -n "${PREFIX:-}" ]]; then
            LOCK_PATH="gs://${BUCKET}/${PREFIX}/default.tflock"
          else
            LOCK_PATH="gs://${BUCKET}/default.tflock"
          fi
          gsutil rm -f "${LOCK_PATH}" || true

      - name: Terraform Destroy (targeted: cluster + node pool)
        if: ${{ inputs.destroy_all == false }}
        env:
          TF_VAR_project:      ${{ secrets.GCP_PROJECT_ID }}
          TF_VAR_region:       ${{ secrets.GCP_REGION }}
          TF_VAR_zone:         ${{ secrets.GCP_ZONE }}
          TF_VAR_cluster_name: ${{ env.CLUSTER_NAME }}
          TF_VAR_github_owner: mexxo-dvp
          TF_VAR_github_repo:  gitops
          TF_VAR_flux_path:    clusters/gke
          TF_VAR_github_token: ${{ secrets.GH_TOKEN }}
          GITHUB_TOKEN:        ${{ secrets.GH_TOKEN }}
        run: |
          set -euo pipefail
          terraform init -input=false
          terraform destroy -input=false -lock-timeout=10m -auto-approve \
            -target=google_container_node_pool.default \
            -target=google_container_cluster.this
          terraform state rm local_file.kubeconfig || true
          terraform state rm module.gke_auth_self || true

      - name: Terraform Destroy (full stack)
        if: ${{ inputs.destroy_all == true }}
        env:
          TF_VAR_project:      ${{ secrets.GCP_PROJECT_ID }}
          TF_VAR_region:       ${{ secrets.GCP_REGION }}
          TF_VAR_zone:         ${{ secrets.GCP_ZONE }}
          TF_VAR_cluster_name: ${{ env.CLUSTER_NAME }}
          TF_VAR_github_owner: mexxo-dvp
          TF_VAR_github_repo:  gitops
          TF_VAR_flux_path:    clusters/gke
          TF_VAR_github_token: ${{ secrets.GH_TOKEN }}
          GITHUB_TOKEN:        ${{ secrets.GH_TOKEN }}
        run: |
          set -euo pipefail
          terraform init -input=false
          terraform destroy -input=false -lock-timeout=10m -auto-approve

      - name: Legacy cleanup (detect location, gcloud delete)
        if: ${{ failure() && inputs.destroy_all == false }}
        env:
          PROJECT_ID:   ${{ secrets.GCP_PROJECT_ID }}
          CLUSTER_NAME: ${{ env.CLUSTER_NAME }}
        run: |
          set -euxo pipefail
          LOC=$(gcloud container clusters list --project "$PROJECT_ID" \
                 --filter="name=$CLUSTER_NAME" --format="value(location)" | head -n1 || true)
          echo "Detected cluster location: ${LOC:-<none>}"
          if [[ -n "${LOC:-}" ]]; then
            if [[ "$LOC" =~ -[a-z]$ ]]; then
              gcloud container clusters delete "$CLUSTER_NAME" --zone "$LOC" --project "$PROJECT_ID" --quiet || true
            else
              gcloud container clusters delete "$CLUSTER_NAME" --region "$LOC" --project "$PROJECT_ID" --quiet || true
            fi
          fi
